# .github/workflows/main.yml

name: 'Build and Release Koaburra'

on:
  push:
    tags:
      - 'build'      # Trigger for the build-only job
      - 'v*.*.*'     # Trigger for the release job

jobs:
  # JOB 1: Create a build artifact when the 'build' tag is pushed.
  # This tag should point to a commit on your 'development' branch.
  build:
    name: Create Build Artifact
    # This entire job will only run if the 'build' tag was pushed
    if: github.ref == 'refs/tags/build'
    permissions:
      contents: read # Only needs to read the code
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ""
          - platform: 'windows-latest'
            args: ""
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # ... All setup steps are identical for both jobs ...
      - name: Install system dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile
      # This tauri-action step only builds the app. It does NOT release.
      - name: Build Tauri App
        id: tauri-build
        uses: tauri-apps/tauri-action@v0
        with:
          args: ${{ matrix.args }}
      # This step uploads the result as a workflow artifact.
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: koaburra-build-${{ matrix.platform }}
          path: ${{ steps.tauri-build.outputs.releasePath }}

  # JOB 2: Create a formal GitHub Release when a 'v*.*.*' tag is pushed.
  # This tag should point to a commit on your 'main' branch.
  release:
    name: Create GitHub Release
    # This entire job will only run if a version tag (v*.*.*) was pushed
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write # Needs write permissions to create a release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ""
          - platform: 'windows-latest'
            args: ""
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # ... All setup steps are identical for both jobs ...
      - name: Install system dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile
      # This tauri-action step builds AND creates a GitHub Release.
      - name: Build and Release Tauri App
        uses: tauri-apps/tauri-action@v0
        with:
          tagName: app-v__VERSION__
          releaseName: 'Koka v__VERSION__'
          releaseBody: |
            # Koka v__VERSION__ Release
            ... your release notes ...
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}